CWD = $(shell pwd)
MACH = $(shell uname -p)
LLVM_TARGET = $(MACH)

ifeq ($(MACH),aarch64)
  LLVM_TARGET = AArch64
endif

ifeq ($(MACH),x86_64)
  LLVM_TARGET = X86
endif

DEBUG_BUILD := 0

# Disable Sphinx for now.
HAVE_SPHINX := 0

# Edit the following 4 paths to match your installation:
CC = /path/to/your/local/gcc/bin/gcc
CXX = /path/to/your/local/gcc/bin/g++
FC = /path/to/your/local/flang/bin/flang
GCC_RUNPATH = /path/to/your/local/gcc/lib64

CMAKE = /usr/bin/cmake
GMAKE = /usr/bin/gmake
GMAKE_NUMJOBS = -j16

TOPDIR = $(CWD)
SRCDIR = flang9
TOPSRCDIR = $(TOPDIR)/$(SRCDIR)
TOPBUILDDIR = $(TOPDIR)/build
LLVM_RUNPATH = $(TOPBUILDDIR)/lib
LLVM_CONFIG = $(TOPBUILDDIR)/bin/llvm-config

OFLAG = -O2
GFLAG = -g
ENABLE_EXPENSIVE_CHECKS = 0

ifeq ($(DEBUG_BUILD),1)
  OFLAG = -O0
  GFLAG = -g3
  ENABLE_EXPENSIVE_CHECKS = 1
  TOPBUILDDIR = $(TOPDIR)/build-debug
endif

# Edit the following path to match your desired setup:
CMAKE_PREFIX = /path/to/your/desired/flang9/install

CMAKE_INSTALL_BINDIR = $(CMAKE_PREFIX)/bin
CMAKE_INSTALL_LIBDIR = $(CMAKE_PREFIX)/lib
CMAKE_INSTALL_LIBEXECDIR = $(CMAKE_PREFIX)/libexec
CMAKE_INSTALL_INCLUDEDIR = $(CMAKE_PREFIX)/include
CMAKE_INSTALL_DATADIR = $(CMAKE_PREFIX)/share
CMAKE_INSTALL_DATAROOTDIR = $(CMAKE_PREFIX)/share

CFLAGS = $(GFLAG) $(OFLAG) -pthread -fno-strict-aliasing
CFLAGS += -fno-tree-slp-vectorize -fno-tree-vectorize
CFLAGS += -fno-reorder-blocks -fno-toplevel-reorder
CFLAGS += -Wall -Wcast-align -Wno-long-long -Woverflow
CFLAGS += -Wstack-protector -ffunction-sections -fdata-sections
CFLAGS += -fkeep-static-consts -fstack-protector-all
CFLAGS += -fno-omit-frame-pointer
CFLAGS += -Wl,-rpath -Wl,$(CMAKE_INSTALL_LIBDIR)
CFLAGS += -Wl,-rpath -Wl,$(GCC_RUNPATH)

CXXFLAGS = $(GFLAG) $(OFLAG) -pthread -std=c++11 -fno-strict-aliasing
CXXFLAGS += -fexceptions -frtti -fstack-protector-all
CXXFLAGS += -fno-tree-vectorize -fno-tree-slp-vectorize
CXXFLAGS += -fno-reorder-blocks -fno-toplevel-reorder
CXXFLAGS += -fext-numeric-literals
CXXFLAGS += -Wall -Wcast-align -Wno-long-long -Woverflow
CXXFLAGS += -Wstack-protector -fkeep-static-consts
CXXFLAGS += -fdata-sections -ffunction-sections
CXXFLAGS += -Wl,-rpath -Wl,$(CMAKE_INSTALL_LIBDIR)
CXXFLAGS += -Wl,-rpath -Wl,$(GCC_RUNPATH)

FFLAGS = $(GFLAG) $(OFLAG) -pthread -Mallocatable=03 -Mreentrant

CPPFLAGS = -D_REENTRANT -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64
CPPFLAGS += -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS
CPPFLAGS += -D__STDC_LIMIT_MACROS -DHAVE_POSIX_MEMALIGN=1
CPPFLAGS += -DHAVE_SYSCONF=1 -DHAVE_GETPAGESIZE=1
CPPFLAGS += -D_GLIBCXX_FULLY_DYNAMIC_STRING=1
CPPFLAGS += -DOMP_50=1

FPPFLAGS = -D_REENTRANT -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64
FPPFLAGS += -DOMP_50=1

LDFLAGS = -Wl,-rpath -Wl,$(CMAKE_INSTALL_LIBDIR)
LDFLAGS += -Wl,-rpath -Wl,$(GCC_RUNPATH)

ifeq ($(DEBUG_BUILD),1)
  CPPFLAGS += -D_DEBUG
endif

ifeq ($(ENABLE_EXPENSIVE_CHECKS),1)
  CPPFLAGS += -D_GLIBCXX_DEBUG -DXDEBUG
endif

LLVM_LIBEXECDIR = /usr/libexec

# Edit this path to match your build environment setup.
LIBFFI_INCDIR = /path/to/your/libffi/header/files

CMAKE_OPTIONS = -DCMAKE_C_COMPILER:FILEPATH=$(CC)
CMAKE_OPTIONS += -DCMAKE_CXX_COMPILER:FILEPATH=$(CXX)
CMAKE_OPTIONS += -DCMAKE_Fortran_COMPILER:FILEPATH=$(FC)
CMAKE_OPTIONS += -DCMAKE_C_CFLAGS:STRING="$(CPPFLAGS) $(CFLAGS)"
CMAKE_OPTIONS += -DCMAKE_CXX_FLAGS:STRING="$(CPPFLAGS) $(CXXFLAGS)"
CMAKE_OPTIONS += -DCMAKE_Fortran_FLAGS:STRING="$(FPPFLAGS) $(FFLAGS)"
CMAKE_OPTIONS += -DCMAKE_EXE_LINKER_FLAGS:STRING="$(LDFLAGS)"
CMAKE_OPTIONS += -DCMAKE_SHARED_LINKER_FLAGS:STRING="$(LDFLAGS)"
CMAKE_OPTIONS += -DCMAKE_INSTALL_PREFIX:FILEPATH=$(CMAKE_PREFIX)
CMAKE_OPTIONS += -DCMAKE_AR:FILEPATH=/usr/bin/ar

CMAKE_OPTIONS += -DCMAKE_INSTALL_BINDIR:STRING="$(CMAKE_INSTALL_BINDIR)"
CMAKE_OPTIONS += -DCMAKE_INSTALL_LIBDIR:STRING="$(CMAKE_INSTALL_LIBDIR)"
CMAKE_OPTIONS += -DCMAKE_INSTALL_LIBEXECDIR:STRING="$(CMAKE_INSTALL_LIBEXECDIR)"
CMAKE_OPTIONS += -DCMAKE_INSTALL_INCLUDEDIR:STRING="$(CMAKE_INSTALL_INCLUDEDIR)"
CMAKE_OPTIONS += -DCMAKE_INSTALL_DATADIR:STRING="$(CMAKE_INSTALL_DATADIR)"
CMAKE_OPTIONS += -DCMAKE_INSTALL_DATAROOTDIR:STRING="$(CMAKE_INSTALL_DATAROOTDIR)"

CMAKE_OPTIONS += -DLLVM_TARGETS_TO_BUILD:STRING="$(LLVM_TARGET)"

CMAKE_OPTIONS += -DCMAKE_MAKE_PROGRAM:STRING="/usr/bin/gmake"
CMAKE_OPTIONS += -DCMAKE_ASM_COMPILER:STRING="$(CC)"
CMAKE_OPTIONS += -DCMAKE_INSTALL_RPATH:STRING="$(CMAKE_INSTALL_LIBDIR)"
CMAKE_OPTIONS += -DLLVM_BUILD_TOOLS:BOOL=ON
CMAKE_OPTIONS += -DLLVM_INCLUDE_TOOLS:BOOL=ON
CMAKE_OPTIONS += -DLLVM_BUILD_TESTS:BOOL=ON
CMAKE_OPTIONS += -DLLVM_INCLUDE_TESTS:BOOL=ON
CMAKE_OPTIONS += -DLLVM_ENABLE_THREADS:BOOL=ON
CMAKE_OPTIONS += -DLLVM_BUILD_32_BITS:BOOL=OFF

ifeq ($(DEBUG_BUILD),1)
  CMAKE_OPTIONS += -DCMAKE_BUILD_TYPE:STRING=Debug
  CMAKE_OPTIONS += -DCMAKE_C_FLAGS_DEBUG:STRING="$(OFLAG) $(GFLAG)"
  CMAKE_OPTIONS += -DCMAKE_CXX_FLAGS_DEBUG:STRING="$(OFLAG) $(GFLAG)"
  CMAKE_OPTIONS += -DCMAKE_Fortran_FLAGS_DEBUG:STRING="$(OFLAG) $(GFLAG)"
  CMAKE_OPTIONS += -DCMAKE_ASM_FLAGS_DEBUG:STRING="$(OFLAG) $(GFLAG)"
  CMAKE_OPTIONS += -DCMAKE_ASM_FLAGS_RELWITHDEBINFO:STRING="$(OFLAG) $(GFLAG)"
  CMAKE_OPTIONS += -DCMAKE_C_FLAGS_RELWITHDEBINFO:STRING="$(OFLAG) $(GFLAG)"
  CMAKE_OPTIONS += -DCMAKE_CXX_FLAGS_RELWITHDEBINFO:STRING="$(OFLAG) $(GFLAG)"
  CMAKE_OPTIONS += -DLLVM_ENABLE_ASSERTIONS:BOOL=ON
  CMAKE_OPTIONS += -DLLVM_ENABLE_EXPENSIVE_CHECKS:BOOL=ON
else
  CMAKE_OPTIONS += -DCMAKE_BUILD_TYPE:STRING=Release
  CMAKE_OPTIONS += -DCMAKE_C_FLAGS_DEBUG:STRING="$(OFLAG)"
  CMAKE_OPTIONS += -DCMAKE_CXX_FLAGS_DEBUG:STRING="$(OFLAG)"
  CMAKE_OPTIONS += -DCMAKE_Fortran_FLAGS_DEBUG:STRING="$(OFLAG)"
  CMAKE_OPTIONS += -DCMAKE_ASM_FLAGS_DEBUG:STRING="$(OFLAG)"
  CMAKE_OPTIONS += -DCMAKE_ASM_FLAGS_RELWITHDEBINFO:STRING="$(OFLAG)"
  CMAKE_OPTIONS += -DCMAKE_C_FLAGS_RELWITHDEBINFO:STRING="$(OFLAG)"
  CMAKE_OPTIONS += -DCMAKE_CXX_FLAGS_RELWITHDEBINFO:STRING="$(OFLAG)"
  CMAKE_OPTIONS += -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF
  CMAKE_OPTIONS += -DLLVM_ENABLE_EXPENSIVE_CHECKS:BOOL=OFF
endif

CMAKE_OPTIONS += -DLLVM_BUILD_EXAMPLES:BOOL=OFF
CMAKE_OPTIONS += -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF
CMAKE_OPTIONS += -DLLVM_ENABLE_EH:BOOL=ON
CMAKE_OPTIONS += -DLLVM_ENABLE_PIC:BOOL=ON
CMAKE_OPTIONS += -DLLVM_ENABLE_RTTI:BOOL=ON
CMAKE_OPTIONS += -DLLVM_ENABLE_WARNINGS:BOOL=ON
CMAKE_OPTIONS += -DLLVM_ENABLE_PEDANTIC:BOOL=ON
CMAKE_OPTIONS += -DLLVM_ABI_BREAKING_CHECKS:STRING="FORCE_OFF"
CMAKE_OPTIONS += -DLLVM_ENABLE_ZLIB:BOOL=ON
CMAKE_OPTIONS += -DLLVM_ENABLE_FFI:BOOL=ON
CMAKE_OPTIONS += -DFFI_INCLUDE_DIR:STRING=$(LIBFFI_INCDIR)
CMAKE_OPTIONS += -DFFI_LIBRARY_DIR:STRING=$(LIBFFI_LIBDIR)
CMAKE_OPTIONS += -DLLVM_BINUTILS_INCDIR:STRING="/usr/include"
CMAKE_OPTIONS += -DLLVM_CONFIG:STRING=$(LLVM_CONFIG)

# compiler-rt
CMAKE_OPTIONS += -DCOMPILER_RT_CAN_EXECUTE_TESTS:BOOL=ON
CMAKE_OPTIONS += -DCOMPILER_RT_BUILD_BUILTINS:BOOL=ON
CMAKE_OPTIONS += -DCOMPILER_RT_BUILD_SANITIZERS:BOOL=ON
CMAKE_OPTIONS += -DCOMPILER_RT_BUILD_LIBFUZZER:BOOL=ON
CMAKE_OPTIONS += -DCOMPILER_RT_BUILD_PROFILE:BOOL=ON
CMAKE_OPTIONS += -DCOMPILER_RT_BUILD_XRAY:BOOL=ON
CMAKE_OPTIONS += -DSANITIZER_CAN_USE_CXXABI:BOOL=ON
CMAKE_OPTIONS += -DSANITIZER_CXX_ABI_LIBNAME:STRING="libstdc++"

ifeq ($(HAVE_SPHINX),1)
  CMAKE_OPTIONS += -DSPHINX_EXECUTABLE:STRING="/usr/bin/sphinx-build"
  CMAKE_OPTIONS += -DLLVM_ENABLE_SPHINX:BOOL=ON
  CMAKE_OPTIONS += -DLLVM_BUILD_DOCS:BOOL=ON
  CMAKE_OPTIONS += -DSPHINX_OUTPUT_HTML:BOOL=ON
  CMAKE_OPTIONS += -DSPHINX_OUTPUT_MAN:BOOL=ON
  CMAKE_OPTIONS += -DSPHINX_WARNINGS_AS_ERRORS:BOOL=OFF
endif

CMAKE_OPTIONS += -DLLVM_BUILD_LLVM_DYLIB:BOOL=ON
CMAKE_OPTIONS += -DLLVM_LINK_LLVM_DYLIB:BOOL=ON
CMAKE_OPTIONS += -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
CMAKE_OPTIONS += -DLLVM_COMPILER_IS_GCC_COMPATIBLE:BOOL=ON

# Prevent cmake from messing with the RPATH.
CMAKE_OPTIONS += -DCMAKE_SKIP_RPATH=ON

# OpenMP
CMAKE_OPTIONS += -DLIBOMP_ARCH=aarch64
CMAKE_OPTIONS += -DLIBOMP_LIB_TYPE=normal
CMAKE_OPTIONS += -DLIBOMP_OMP_VERSION=50
CMAKE_OPTIONS += -DLIBOMP_USE_INTERNODE_ALIGNMENT=on
CMAKE_OPTIONS += -DLIBOMP_USE_VERSION_SYMBOLS=on
CMAKE_OPTIONS += -DLIBOMP_ENABLE_SHARED=on
CMAKE_OPTIONS += -DLIBOMP_OMPT_SUPPORT=on
CMAKE_OPTIONS += -DLIBOMP_OMPT_BLAME=on
CMAKE_OPTIONS += -DLIBOMP_OMPT_TRACE=on
CMAKE_OPTIONS += -DLIBOMP_STATS=off
CMAKE_OPTIONS += -DLIBOMP_USE_DEBUGGER=off
CMAKE_OPTIONS += -DOPENMP_ENABLE_LIBOMPTARGET=on

# Flang libpgmath target CPU optimization
CMAKE_OPTIONS += -DLLVM_FLANG_CPU_TARGET:STRING="thunderx2t99"

LLVM_BUILD_ENV = CC="$(CC)"
LLVM_BUILD_ENV += CXX="$(CXX)"
LLVM_BUILD_ENV += CFLAGS="$(CFLAGS)"
LLVM_BUILD_ENV += CXXFLAGS="$(CXXFLAGS)"
LLVM_BUILD_ENV += LDFLAGS="$(LDFLAGS)"
LLVM_BUILD_ENV += LD_OPTIONS="$(LD_OPTIONS)"
LLVM_BUILD_ENV += PATH="$(PATH)"
LLVM_BUILD_ENV += LANG="C"
LLVM_BUILD_ENV += LC_ALL="C"

configure:
	( cd $(TOPSRCDIR) ; \
	  mkdir -p $(TOPBUILDDIR) ; \
	  if [ ! -f $(TOPBUILDDIR)/.configured ] ; \
	    then echo "Configuring $(LLVM_TARGET) LLVM with $(CMAKE_OPTIONS)" ; \
	    cd $(TOPBUILDDIR) ; \
	    /usr/bin/env - $(LLVM_BUILD_ENV) $(CMAKE) $(CMAKE_OPTIONS) $(TOPSRCDIR) ; \
	    cd $(TOPBUILDDIR) ; \
	    touch $(TOPBUILDDIR)/.configured ; \
	  else \
	    echo "LLVM has already been configured." ; \
	  fi )

confclean:
	  rm -f $(TOPBUILDDIR)/.configured

build: configure
	( if [ ! -d $(TOPBUIDDIR) ] || [ ! -f $(TOPBUILDDIR)/.configured ] ; \
	    then echo "LLVM has not been configured" ; \
	  else \
	    cd $(TOPBUILDDIR) ; \
	    $(GMAKE) $(GMAKE_NUMJOBS) ; \
	    touch $(TOPBUILDDIR)/.built ; \
	  fi )

clean:
	( if [ -f $(TOPBUIDLDIR) ] ; \
	    then cd $(TOPBUILDDIR) ; \
	    $(GMAKE) clean ; \
	    rm -f $(TOPBUILDDIR)/.built ; \
	  fi )

clobber:
	  rm -rf $(TOPBUILDDIR)

all: build


